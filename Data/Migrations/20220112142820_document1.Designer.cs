// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(Erp_Context))]
    [Migration("20220112142820_document1")]
    partial class document1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Entity.Categories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TopCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Entity.CategoriesLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoriesId");

                    b.HasIndex("LanguageId", "CategoriesId")
                        .IsUnique();

                    b.ToTable("CategoriesLanguages");
                });

            modelBuilder.Entity("Entity.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("Entity.CityLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryLanguageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("LanguagesId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryLanguageId");

                    b.HasIndex("LanguagesId");

                    b.ToTable("CityLanguage");
                });

            modelBuilder.Entity("Entity.Companies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TaxNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("TaxOffice")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Entity.CompanyAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("AddressTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("CompanyAddress");
                });

            modelBuilder.Entity("Entity.ConsumptionMaterialStock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ConsumptionMaterialAddress")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ConsumptionMaterialId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExitDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("UniqueNo")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ConsumptionMaterialId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("StoreId");

                    b.ToTable("ConsumptionMaterialStock");
                });

            modelBuilder.Entity("Entity.ConsumptionMaterialSuppliers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("ConsumptionMaterialId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ConsumptionMaterialId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("ConsumptionMaterialSuppliers");
                });

            modelBuilder.Entity("Entity.ConsumptionMaterials", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("BarcodeNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ConsumptionMaterialAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConsumptionUnitId")
                        .HasColumnType("int");

                    b.Property<string>("CostPrice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasMaxLength(200)
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExitDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InvoiceNo")
                        .HasColumnType("int");

                    b.Property<int>("MinStockQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StockNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UniqueNo")
                        .HasColumnType("int");

                    b.Property<int>("UnitsOfMeasureId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ConsumptionUnitId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("UnitsOfMeasureId");

                    b.ToTable("ConsumptionMaterials");
                });

            modelBuilder.Entity("Entity.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UniversalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Entity.CountryLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LangaugeId")
                        .HasColumnType("int");

                    b.Property<int?>("LanguagesId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("LanguagesId");

                    b.ToTable("CountryLanguage");
                });

            modelBuilder.Entity("Entity.Currencies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("Entity.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UrlPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Entity.Languages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShortCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("Entity.MaterialCertificates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Certificate")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("MaterialId");

                    b.ToTable("MaterialCertificates");
                });

            modelBuilder.Entity("Entity.MaterialExpertDeliverys", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryNote")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<int>("DeliveryStaffId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("MaterialId");

                    b.ToTable("MaterialExpertDeliverys");
                });

            modelBuilder.Entity("Entity.MaterialRawMaterials", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int>("RawMaterialId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RawMaterialId");

                    b.HasIndex("MaterialId", "RawMaterialId")
                        .IsUnique();

                    b.ToTable("MaterialRawMaterials");
                });

            modelBuilder.Entity("Entity.MaterialStock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExitDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("MaterialAdress")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("UniqueNo")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("MaterialId");

                    b.ToTable("MaterialStock");
                });

            modelBuilder.Entity("Entity.MaterialSuppliers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("MaterialId");

                    b.ToTable("MaterialSuppliers");
                });

            modelBuilder.Entity("Entity.MaterialSupplyRequests", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ApprovingStaffId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("RequestMadeQuantity")
                        .HasColumnType("int");

                    b.Property<int>("RequestingStaffId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("MaterialId");

                    b.HasIndex("OrderId");

                    b.ToTable("MaterialSupplyRequests");
                });

            modelBuilder.Entity("Entity.MaterialUnitsOfMeasures", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int>("PurchasingUnitId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UnitsOfMeasureId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PurchasingUnitId");

                    b.HasIndex("UnitsOfMeasureId");

                    b.HasIndex("MaterialId", "UnitsOfMeasureId")
                        .IsUnique();

                    b.ToTable("MaterialUnitsOfMeasures");
                });

            modelBuilder.Entity("Entity.Materials", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("BarcodeNo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CostPrice")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<float>("Diameter")
                        .HasColumnType("real");

                    b.Property<float>("Length")
                        .HasColumnType("real");

                    b.Property<string>("MaterialCertificate")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("MinStockQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StockNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("Entity.MeetingRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("MeetingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MeetingNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReminderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReminderNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("MeetingRecord");
                });

            modelBuilder.Entity("Entity.Offers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerReply")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Kdv")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("LineOfferAmount")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentTerm")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantitiy")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TotalCost")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("UnitCost")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("UnitOfferAmount")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("Entity.OrderChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("OrderChannel");
                });

            modelBuilder.Entity("Entity.OrderProducts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantitiy")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("OrderId", "ProductId")
                        .IsUnique();

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("Entity.Orders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderChannelId")
                        .HasColumnType("int");

                    b.Property<string>("OrderCustomerNo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderFrom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OrderNo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("OrderNote")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<int>("OrderType")
                        .HasColumnType("int");

                    b.Property<string>("RejectNote")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("OrderChannelId");

                    b.HasIndex("StoreId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Entity.Process", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Cost")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("ProcessNo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Process");
                });

            modelBuilder.Entity("Entity.ProcessLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("ProcessId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProcessId")
                        .IsUnique();

                    b.HasIndex("LanguageId", "ProcessId")
                        .IsUnique();

                    b.ToTable("ProcessLanguages");
                });

            modelBuilder.Entity("Entity.ProductDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("DocumentId", "ProductId")
                        .IsUnique();

                    b.ToTable("ProductDocuments");
                });

            modelBuilder.Entity("Entity.ProductMaterials", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UnitMeasureId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.HasIndex("UnitMeasureId");

                    b.HasIndex("ProductId", "MaterialId")
                        .IsUnique();

                    b.ToTable("ProductMaterials");
                });

            modelBuilder.Entity("Entity.ProductProcess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProcessDuration")
                        .HasColumnType("int");

                    b.Property<int>("ProcessId")
                        .HasColumnType("int");

                    b.Property<int>("ProcessOrderNo")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProcessId");

                    b.HasIndex("ProductId", "ProcessId")
                        .IsUnique();

                    b.ToTable("ProductProcess");
                });

            modelBuilder.Entity("Entity.ProductStock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExitDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProductAddress")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("UniqueNo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ProductId");

                    b.HasIndex("StoreId");

                    b.ToTable("ProductStock");
                });

            modelBuilder.Entity("Entity.Products", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("BarcodeNo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Hour")
                        .HasColumnType("int");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("IsPrescriptions")
                        .HasColumnType("bit");

                    b.Property<int>("Minute")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ProductCertificate")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ProductCost")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<int>("ProductType")
                        .HasColumnType("int");

                    b.Property<string>("ProductionSerialNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("Second")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TechnicalImage")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Entity.RawMaterials", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("RawMaterials");
                });

            modelBuilder.Entity("Entity.Rejection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RejectionMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Rejections");
                });

            modelBuilder.Entity("Entity.Roles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Entity.SawdustStock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExitDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int>("OrderNo")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SawdustStockAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("MaterialId");

                    b.HasIndex("StoreId");

                    b.ToTable("SawdustStock");
                });

            modelBuilder.Entity("Entity.SpeacialProductDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("SpecialProductDescription")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ProductId");

                    b.ToTable("SpeacialProductDescription");
                });

            modelBuilder.Entity("Entity.StaffProcess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProcessId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<bool>("SignatureStatu")
                        .HasColumnType("bit");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProcessId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StaffId", "ProcessId")
                        .IsUnique();

                    b.ToTable("StaffProcess");
                });

            modelBuilder.Entity("Entity.StaffProcessPermisions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProcessId")
                        .HasColumnType("int");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProcessId");

                    b.HasIndex("StaffId", "ProcessId")
                        .IsUnique();

                    b.ToTable("StaffProcessPermisions");
                });

            modelBuilder.Entity("Entity.StaffRoles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("StaffId", "RoleId")
                        .IsUnique();

                    b.ToTable("StaffRoles");
                });

            modelBuilder.Entity("Entity.Staffs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffNo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Staffs");
                });

            modelBuilder.Entity("Entity.StandProcess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProcessId")
                        .HasColumnType("int");

                    b.Property<int>("StandId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProcessId");

                    b.HasIndex("StandId", "ProcessId")
                        .IsUnique();

                    b.ToTable("StandProcess");
                });

            modelBuilder.Entity("Entity.Stands", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("StandNo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Stands");
                });

            modelBuilder.Entity("Entity.Stores", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("Entity.TodoList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("StaffId");

                    b.ToTable("TodoList");
                });

            modelBuilder.Entity("Entity.UnitsOfMeasure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MaterialsId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("UnitsOfMeasureId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("MaterialsId");

                    b.HasIndex("UnitsOfMeasureId");

                    b.ToTable("UnitsOfMeasure");
                });

            modelBuilder.Entity("Entity.CategoriesLanguage", b =>
                {
                    b.HasOne("Entity.Categories", "Categories")
                        .WithMany("CategoriesLanguage")
                        .HasForeignKey("CategoriesId");

                    b.HasOne("Entity.Languages", "Languages")
                        .WithMany("CategoriesLanguage")
                        .HasForeignKey("LanguageId");

                    b.Navigation("Categories");

                    b.Navigation("Languages");
                });

            modelBuilder.Entity("Entity.City", b =>
                {
                    b.HasOne("Entity.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Entity.CityLanguage", b =>
                {
                    b.HasOne("Entity.City", "Cities")
                        .WithMany("CityLanguage")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.CountryLanguage", null)
                        .WithMany("CityLanguages")
                        .HasForeignKey("CountryLanguageId");

                    b.HasOne("Entity.Languages", "Languages")
                        .WithMany()
                        .HasForeignKey("LanguagesId");

                    b.Navigation("Cities");

                    b.Navigation("Languages");
                });

            modelBuilder.Entity("Entity.CompanyAddress", b =>
                {
                    b.HasOne("Entity.Companies", "Companies")
                        .WithMany("CompanyAddress")
                        .HasForeignKey("CompanyId");

                    b.Navigation("Companies");
                });

            modelBuilder.Entity("Entity.ConsumptionMaterialStock", b =>
                {
                    b.HasOne("Entity.Companies", "Companies")
                        .WithMany("ConsumptionMaterialStock")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Entity.ConsumptionMaterials", "ConsumptionMaterials")
                        .WithMany("ConsumptionMaterialStock")
                        .HasForeignKey("ConsumptionMaterialId");

                    b.HasOne("Entity.Stores", "Stores")
                        .WithMany("ConsumptionMaterialStock")
                        .HasForeignKey("StoreId");

                    b.Navigation("Companies");

                    b.Navigation("ConsumptionMaterials");

                    b.Navigation("Stores");
                });

            modelBuilder.Entity("Entity.ConsumptionMaterialSuppliers", b =>
                {
                    b.HasOne("Entity.Companies", "Companies")
                        .WithMany("ConsumptionMaterialSuppliers")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Entity.ConsumptionMaterials", "ConsumptionMaterials")
                        .WithMany("ConsumptionMaterialSuppliers")
                        .HasForeignKey("ConsumptionMaterialId");

                    b.Navigation("Companies");

                    b.Navigation("ConsumptionMaterials");
                });

            modelBuilder.Entity("Entity.ConsumptionMaterials", b =>
                {
                    b.HasOne("Entity.Companies", "Companies")
                        .WithMany("ConsumptionMaterials")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Entity.UnitsOfMeasure", "UnitsOfMeasure")
                        .WithMany("ConsumptionMaterials")
                        .HasForeignKey("ConsumptionUnitId");

                    b.HasOne("Entity.Currencies", "Currencies")
                        .WithMany("ConsumptionMaterials")
                        .HasForeignKey("CurrencyId");

                    b.HasOne("Entity.UnitsOfMeasure", "ConsumptionUnits")
                        .WithMany()
                        .HasForeignKey("UnitsOfMeasureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Companies");

                    b.Navigation("ConsumptionUnits");

                    b.Navigation("Currencies");

                    b.Navigation("UnitsOfMeasure");
                });

            modelBuilder.Entity("Entity.CountryLanguage", b =>
                {
                    b.HasOne("Entity.Country", "Countries")
                        .WithMany("CountryLanguage")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Languages", "Languages")
                        .WithMany()
                        .HasForeignKey("LanguagesId");

                    b.Navigation("Countries");

                    b.Navigation("Languages");
                });

            modelBuilder.Entity("Entity.MaterialCertificates", b =>
                {
                    b.HasOne("Entity.Materials", "Materials")
                        .WithMany("MaterialCertificates")
                        .HasForeignKey("MaterialId");

                    b.Navigation("Materials");
                });

            modelBuilder.Entity("Entity.MaterialExpertDeliverys", b =>
                {
                    b.HasOne("Entity.Materials", "Materials")
                        .WithMany("MaterialExpertDeliverys")
                        .HasForeignKey("MaterialId");

                    b.Navigation("Materials");
                });

            modelBuilder.Entity("Entity.MaterialRawMaterials", b =>
                {
                    b.HasOne("Entity.Materials", "Materials")
                        .WithMany("MaterialRawMaterials")
                        .HasForeignKey("MaterialId");

                    b.HasOne("Entity.RawMaterials", "RawMaterials")
                        .WithMany("MaterialRawMaterials")
                        .HasForeignKey("RawMaterialId");

                    b.Navigation("Materials");

                    b.Navigation("RawMaterials");
                });

            modelBuilder.Entity("Entity.MaterialStock", b =>
                {
                    b.HasOne("Entity.Materials", "Materials")
                        .WithMany("MaterialStock")
                        .HasForeignKey("MaterialId");

                    b.Navigation("Materials");
                });

            modelBuilder.Entity("Entity.MaterialSuppliers", b =>
                {
                    b.HasOne("Entity.Companies", "Companies")
                        .WithMany("MaterialSuppliers")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Entity.Materials", "Materials")
                        .WithMany("MaterialSuppliers")
                        .HasForeignKey("MaterialId");

                    b.Navigation("Companies");

                    b.Navigation("Materials");
                });

            modelBuilder.Entity("Entity.MaterialSupplyRequests", b =>
                {
                    b.HasOne("Entity.Companies", "Companies")
                        .WithMany("MaterialSupplyRequests")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Entity.Materials", "Materials")
                        .WithMany("MaterialSupplyRequests")
                        .HasForeignKey("MaterialId");

                    b.HasOne("Entity.Orders", "Orders")
                        .WithMany("MaterialSupplyRequests")
                        .HasForeignKey("OrderId");

                    b.Navigation("Companies");

                    b.Navigation("Materials");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Entity.MaterialUnitsOfMeasures", b =>
                {
                    b.HasOne("Entity.Materials", "Materials")
                        .WithMany("MaterialUnitsOfMeasures")
                        .HasForeignKey("MaterialId");

                    b.HasOne("Entity.UnitsOfMeasure", "UnitsOfMeasure")
                        .WithMany("MaterialUnitsOfMeasures")
                        .HasForeignKey("PurchasingUnitId");

                    b.HasOne("Entity.UnitsOfMeasure", "PurchasingUnits")
                        .WithMany()
                        .HasForeignKey("UnitsOfMeasureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Materials");

                    b.Navigation("PurchasingUnits");

                    b.Navigation("UnitsOfMeasure");
                });

            modelBuilder.Entity("Entity.Materials", b =>
                {
                    b.HasOne("Entity.Currencies", "Currencies")
                        .WithMany("Materials")
                        .HasForeignKey("CurrencyId");

                    b.Navigation("Currencies");
                });

            modelBuilder.Entity("Entity.Offers", b =>
                {
                    b.HasOne("Entity.Currencies", "Currencies")
                        .WithMany("Offers")
                        .HasForeignKey("CurrencyId");

                    b.HasOne("Entity.Orders", "Orders")
                        .WithMany("Offers")
                        .HasForeignKey("OrderId");

                    b.HasOne("Entity.Products", "Products")
                        .WithMany("Offers")
                        .HasForeignKey("ProductId");

                    b.Navigation("Currencies");

                    b.Navigation("Orders");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Entity.OrderProducts", b =>
                {
                    b.HasOne("Entity.Orders", "Orders")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId");

                    b.HasOne("Entity.Products", "Products")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId");

                    b.Navigation("Orders");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Entity.Orders", b =>
                {
                    b.HasOne("Entity.Companies", "Companies")
                        .WithMany("Orders")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Entity.OrderChannel", "OrderChannel")
                        .WithMany("Orders")
                        .HasForeignKey("OrderChannelId");

                    b.HasOne("Entity.Stores", "Stores")
                        .WithMany("Orders")
                        .HasForeignKey("StoreId");

                    b.Navigation("Companies");

                    b.Navigation("OrderChannel");

                    b.Navigation("Stores");
                });

            modelBuilder.Entity("Entity.Process", b =>
                {
                    b.HasOne("Entity.Currencies", "Currencies")
                        .WithMany("Processes")
                        .HasForeignKey("CurrencyId");

                    b.Navigation("Currencies");
                });

            modelBuilder.Entity("Entity.ProcessLanguage", b =>
                {
                    b.HasOne("Entity.Languages", "Languages")
                        .WithMany("ProcessLanguage")
                        .HasForeignKey("LanguageId");

                    b.HasOne("Entity.Process", "Process")
                        .WithMany("ProcessLanguage")
                        .HasForeignKey("ProcessId");

                    b.Navigation("Languages");

                    b.Navigation("Process");
                });

            modelBuilder.Entity("Entity.ProductDocument", b =>
                {
                    b.HasOne("Entity.Document", "Document")
                        .WithMany("ProductDocuments")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Products", "Products")
                        .WithMany("ProductDocuments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Entity.ProductMaterials", b =>
                {
                    b.HasOne("Entity.Materials", "Materials")
                        .WithMany("ProductMaterials")
                        .HasForeignKey("MaterialId");

                    b.HasOne("Entity.Products", "Products")
                        .WithMany("ProductMaterials")
                        .HasForeignKey("ProductId");

                    b.HasOne("Entity.UnitsOfMeasure", "UnitsOfMeasure")
                        .WithMany("ProductMaterials")
                        .HasForeignKey("UnitMeasureId");

                    b.Navigation("Materials");

                    b.Navigation("Products");

                    b.Navigation("UnitsOfMeasure");
                });

            modelBuilder.Entity("Entity.ProductProcess", b =>
                {
                    b.HasOne("Entity.Process", "Process")
                        .WithMany("ProductProcess")
                        .HasForeignKey("ProcessId");

                    b.HasOne("Entity.Products", "Products")
                        .WithMany("ProductProcess")
                        .HasForeignKey("ProductId");

                    b.Navigation("Process");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Entity.ProductStock", b =>
                {
                    b.HasOne("Entity.Products", "Products")
                        .WithMany("ProductStock")
                        .HasForeignKey("ProductId");

                    b.HasOne("Entity.Stores", "Stores")
                        .WithMany("ProductStock")
                        .HasForeignKey("StoreId");

                    b.Navigation("Products");

                    b.Navigation("Stores");
                });

            modelBuilder.Entity("Entity.Products", b =>
                {
                    b.HasOne("Entity.Categories", "Categories")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Categories");
                });

            modelBuilder.Entity("Entity.SawdustStock", b =>
                {
                    b.HasOne("Entity.Companies", "Companies")
                        .WithMany("SawdustStocks")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Entity.Materials", "Materials")
                        .WithMany("SawdustStocks")
                        .HasForeignKey("MaterialId");

                    b.HasOne("Entity.Stores", "Stores")
                        .WithMany("SawdustStocks")
                        .HasForeignKey("StoreId");

                    b.Navigation("Companies");

                    b.Navigation("Materials");

                    b.Navigation("Stores");
                });

            modelBuilder.Entity("Entity.SpeacialProductDescription", b =>
                {
                    b.HasOne("Entity.Products", "Products")
                        .WithMany("SpeacialProductDescription")
                        .HasForeignKey("ProductId");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Entity.StaffProcess", b =>
                {
                    b.HasOne("Entity.Process", "Process")
                        .WithMany("StaffProcess")
                        .HasForeignKey("ProcessId");

                    b.HasOne("Entity.Products", "Products")
                        .WithMany("StaffProcesses")
                        .HasForeignKey("ProductId");

                    b.HasOne("Entity.Staffs", "Staffs")
                        .WithMany("StaffProcess")
                        .HasForeignKey("StaffId");

                    b.Navigation("Process");

                    b.Navigation("Products");

                    b.Navigation("Staffs");
                });

            modelBuilder.Entity("Entity.StaffProcessPermisions", b =>
                {
                    b.HasOne("Entity.Process", "Process")
                        .WithMany("StaffProcessPermisions")
                        .HasForeignKey("ProcessId");

                    b.HasOne("Entity.Staffs", "Staffs")
                        .WithMany("StaffProcessPermisions")
                        .HasForeignKey("StaffId");

                    b.Navigation("Process");

                    b.Navigation("Staffs");
                });

            modelBuilder.Entity("Entity.StaffRoles", b =>
                {
                    b.HasOne("Entity.Roles", "Roles")
                        .WithMany("StaffRoles")
                        .HasForeignKey("RoleId");

                    b.HasOne("Entity.Staffs", "Staffs")
                        .WithMany("StaffRoles")
                        .HasForeignKey("StaffId");

                    b.Navigation("Roles");

                    b.Navigation("Staffs");
                });

            modelBuilder.Entity("Entity.StandProcess", b =>
                {
                    b.HasOne("Entity.Process", "Process")
                        .WithMany("StandProcess")
                        .HasForeignKey("ProcessId");

                    b.HasOne("Entity.Stands", "Stands")
                        .WithMany("StandProcess")
                        .HasForeignKey("StandId");

                    b.Navigation("Process");

                    b.Navigation("Stands");
                });

            modelBuilder.Entity("Entity.TodoList", b =>
                {
                    b.HasOne("Entity.Staffs", "Staffs")
                        .WithMany("TodoLists")
                        .HasForeignKey("StaffId");

                    b.Navigation("Staffs");
                });

            modelBuilder.Entity("Entity.UnitsOfMeasure", b =>
                {
                    b.HasOne("Entity.Materials", null)
                        .WithMany("UnitsOfMeasure")
                        .HasForeignKey("MaterialsId");

                    b.HasOne("Entity.UnitsOfMeasure", null)
                        .WithMany("PurchasingUnits")
                        .HasForeignKey("UnitsOfMeasureId");
                });

            modelBuilder.Entity("Entity.Categories", b =>
                {
                    b.Navigation("CategoriesLanguage");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Entity.City", b =>
                {
                    b.Navigation("CityLanguage");
                });

            modelBuilder.Entity("Entity.Companies", b =>
                {
                    b.Navigation("CompanyAddress");

                    b.Navigation("ConsumptionMaterials");

                    b.Navigation("ConsumptionMaterialStock");

                    b.Navigation("ConsumptionMaterialSuppliers");

                    b.Navigation("MaterialSuppliers");

                    b.Navigation("MaterialSupplyRequests");

                    b.Navigation("Orders");

                    b.Navigation("SawdustStocks");
                });

            modelBuilder.Entity("Entity.ConsumptionMaterials", b =>
                {
                    b.Navigation("ConsumptionMaterialStock");

                    b.Navigation("ConsumptionMaterialSuppliers");
                });

            modelBuilder.Entity("Entity.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("CountryLanguage");
                });

            modelBuilder.Entity("Entity.CountryLanguage", b =>
                {
                    b.Navigation("CityLanguages");
                });

            modelBuilder.Entity("Entity.Currencies", b =>
                {
                    b.Navigation("ConsumptionMaterials");

                    b.Navigation("Materials");

                    b.Navigation("Offers");

                    b.Navigation("Processes");
                });

            modelBuilder.Entity("Entity.Document", b =>
                {
                    b.Navigation("ProductDocuments");
                });

            modelBuilder.Entity("Entity.Languages", b =>
                {
                    b.Navigation("CategoriesLanguage");

                    b.Navigation("ProcessLanguage");
                });

            modelBuilder.Entity("Entity.Materials", b =>
                {
                    b.Navigation("MaterialCertificates");

                    b.Navigation("MaterialExpertDeliverys");

                    b.Navigation("MaterialRawMaterials");

                    b.Navigation("MaterialStock");

                    b.Navigation("MaterialSuppliers");

                    b.Navigation("MaterialSupplyRequests");

                    b.Navigation("MaterialUnitsOfMeasures");

                    b.Navigation("ProductMaterials");

                    b.Navigation("SawdustStocks");

                    b.Navigation("UnitsOfMeasure");
                });

            modelBuilder.Entity("Entity.OrderChannel", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Entity.Orders", b =>
                {
                    b.Navigation("MaterialSupplyRequests");

                    b.Navigation("Offers");

                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("Entity.Process", b =>
                {
                    b.Navigation("ProcessLanguage");

                    b.Navigation("ProductProcess");

                    b.Navigation("StaffProcess");

                    b.Navigation("StaffProcessPermisions");

                    b.Navigation("StandProcess");
                });

            modelBuilder.Entity("Entity.Products", b =>
                {
                    b.Navigation("Offers");

                    b.Navigation("OrderProducts");

                    b.Navigation("ProductDocuments");

                    b.Navigation("ProductMaterials");

                    b.Navigation("ProductProcess");

                    b.Navigation("ProductStock");

                    b.Navigation("SpeacialProductDescription");

                    b.Navigation("StaffProcesses");
                });

            modelBuilder.Entity("Entity.RawMaterials", b =>
                {
                    b.Navigation("MaterialRawMaterials");
                });

            modelBuilder.Entity("Entity.Roles", b =>
                {
                    b.Navigation("StaffRoles");
                });

            modelBuilder.Entity("Entity.Staffs", b =>
                {
                    b.Navigation("StaffProcess");

                    b.Navigation("StaffProcessPermisions");

                    b.Navigation("StaffRoles");

                    b.Navigation("TodoLists");
                });

            modelBuilder.Entity("Entity.Stands", b =>
                {
                    b.Navigation("StandProcess");
                });

            modelBuilder.Entity("Entity.Stores", b =>
                {
                    b.Navigation("ConsumptionMaterialStock");

                    b.Navigation("Orders");

                    b.Navigation("ProductStock");

                    b.Navigation("SawdustStocks");
                });

            modelBuilder.Entity("Entity.UnitsOfMeasure", b =>
                {
                    b.Navigation("ConsumptionMaterials");

                    b.Navigation("MaterialUnitsOfMeasures");

                    b.Navigation("ProductMaterials");

                    b.Navigation("PurchasingUnits");
                });
#pragma warning restore 612, 618
        }
    }
}
